#!/usr/bin/env bash
set -eEuo pipefail

############################################################
# Names to use
############################################################
readonly temp_dir="tempdir_$(uuidgen)/"
readonly temp_file_prefix="$(uuidgen)_"

############################################################
# Check and set color codes
############################################################
bold=${FORCE_COLOR_BOLD:-""}
underline=${FORCE_COLOR_UNDERLINE:-""}
standout=${FORCE_COLOR_STANDOUT:-""}
normal=${FORCE_COLOR_NORMAL:-""}
black=${FORCE_COLOR_BLACK:-""}
red=${FORCE_COLOR_RED:-""}
green=${FORCE_COLOR_GREEN:-""}
yellow=${FORCE_COLOR_YELLOW:-""}
blue=${FORCE_COLOR_BLUE:-""}
magenta=${FORCE_COLOR_MAGENTA:-""}
cyan=${FORCE_COLOR_CYAN:-""}
white=${FORCE_COLOR_WHITE:-""}
# check if stdout is a terminal...
if test -t 1 && [[ -z ${normal} ]]; then
    # see if it supports colors...
    ncolors=$(tput colors)
    if test -n "${ncolors}" && test ${ncolors} -ge 8; then
        bold="$(tput bold)"
        underline="$(tput smul)"
        standout="$(tput smso)"
        normal="$(tput sgr0)"
        black="$(tput setaf 0)"
        red="$(tput setaf 1)"
        green="$(tput setaf 2)"
        yellow="$(tput setaf 3)"
        blue="$(tput setaf 4)"
        magenta="$(tput setaf 5)"
        cyan="$(tput setaf 6)"
        white="$(tput setaf 7)"
    fi
fi

############################################################
# Common functions
############################################################
function extract_7z_archive() {
    local _path="$1"

    local _file_name="$(basename -- "${_path}")"
    local _file_dir="$(dirname -- "${_path}")"
    printf "${magenta}Extracting${normal} %s" "${_file_name}"

    # rename file name to temp file name
    local _temp_file_name="${_file_dir}/${temp_file_prefix}${_file_name}"
    mv -- "${_path}" "${_temp_file_name}"

    # extract tar
    mkdir -- "${_path}"
    local _ret_value=0
    7z x "-o${_path}" -- "${_temp_file_name}" &>/dev/null || _ret_value=$?
    if [[ "${_ret_value}" -ne 0 ]]; then
        printf " ${bold}${red}error occured!${normal}"
    fi
    rm -f -- "${_temp_file_name}"

    printf " ${green}done${normal}\n"
    return $_ret_value
}

function extract_zip_archive() {
    local _path="$1"

    local _file_name="$(basename -- "${_path}")"
    local _file_dir="$(dirname -- "${_path}")"
    printf "${magenta}Extracting${normal} %s" "${_file_name}"

    # rename file name to temp file name
    pushd -- "${_file_dir}" &>/dev/null
    local _temp_file_name="${temp_file_prefix}${_file_name}"
    mv -- "./${_file_name}" "${_temp_file_name}"

    # extract zip
    local _ret_value=0
    mkdir -- "${temp_dir}"
    unzip -d "${temp_dir}" "${_temp_file_name}" &>/dev/null || _ret_value=$?
    if [[ "${_ret_value}" -ne 0 ]]; then
        printf " ${bold}${red}error occured!${normal}"
    fi
    mv -- "${temp_dir}" "./${_file_name}"
    rm -f -- "${_temp_file_name}"
    popd &>/dev/null

    printf " ${green}done${normal}\n"
    return $_ret_value
}

function extract_tar_archive() {
    local _path="$1"
    local _option=""
    if [[ "$#" -eq 2 ]]; then
        local _option="$2"
    fi

    local _file_name="$(basename -- "${_path}")"
    local _file_dir="$(dirname -- "${_path}")"
    printf "${magenta}Extracting${normal} %s" "${_file_name}"

    # rename file name to temp file name
    local _temp_file_name="${_file_dir}/${temp_file_prefix}${_file_name}"
    mv -- "${_path}" "${_temp_file_name}"

    # extract tar
    mkdir -- "${_path}"
    local _ret_value=0
    tar -x $_option -C "${_path}" -f "${_temp_file_name}" &>/dev/null || _ret_value=$?
    if [[ "${_ret_value}" -ne 0 ]]; then
        printf " ${bold}${red}error occured!${normal}"
    fi
    rm -f -- "${_temp_file_name}"

    printf " ${green}done${normal}\n"
    return $_ret_value
}

function uncompress_file() {
    local _path="$1"
    local _cmd="$2"

    local _file_name="$(basename -- "${_path}")"
    local _file_dir="$(dirname -- "${_path}")"
    printf "${magenta}Uncompressing${normal} %s" "${_file_name}"

    # move file to temp dir
    pushd -- "${_file_dir}" &>/dev/null
    mkdir -- "${temp_dir}"
    mv -- "./${_file_name}" "${temp_dir}/"
    cd -- "${temp_dir}"

    # uncompress
    local _ret_value=0
    "${_cmd}" -d -- "./${_file_name}" &>/dev/null || _ret_value=$?
    if [[ "${_ret_value}" -ne 0 ]]; then
        printf " ${bold}${red}error occured!${normal}"
    fi
    local _emitted_file_count="$(find . -type f | wc -l)"
    if [[ "${_emitted_file_count}" -lt 1 ]]; then
        printf " ${bold}${red}no file emitted!${normal}"
        rm -rf -- "${temp_dir}"
    else
        if [[ "${_emitted_file_count}" -gt 1 ]]; then
            printf " ${bold}${red}more than one file emitted!${normal}"
        fi
        local _uncompressed_file_name="$(basename -- "$(find . -type f | head -n 1)")"
        cd ..
        if [[ -e "${_uncompressed_file_name}" ]]; then
            mv -- "${temp_dir}" "./${_file_name}"
        else
            mv -- "${temp_dir}/${_uncompressed_file_name}" ./
            rm -rf -- "${temp_dir}"
        fi
    fi
    popd &>/dev/null

    printf " ${green}done${normal}\n"
    return $_ret_value
}

############################################################
# Extract archives recursively
############################################################
while true; do
    files_extracted=0

    while read file; do
        extract_7z_archive "${file}" || true
        files_extracted=$((files_extracted + 1))
    done < <(find . \( \( -type f -a -name '*.7z' \) -o \( -type f -a -name '*.rar' \) \) -a -print | sort)

    while read file; do
        extract_zip_archive "${file}" || true
        files_extracted=$((files_extracted + 1))
    done < <(find . -type f -name '*.zip' | sort)

    while read file; do
        extract_tar_archive "${file}" -J || true
        files_extracted=$((files_extracted + 1))
    done < <(find . \( \( -type f -a -name '*.txz' \) -o \( -type f -a -name '*.tar.xz' \) \) -a -print | sort)

    while read file; do
        extract_tar_archive "${file}" -j || true
        files_extracted=$((files_extracted + 1))
    done < <(find . \( \( -type f -a -name '*.tbz' \) -o \( -type f -a -name '*.tar.bz2' \) \) -a -print | sort)

    while read file; do
        extract_tar_archive "${file}" -z || true
        files_extracted=$((files_extracted + 1))
    done < <(find . \( \( -type f -a -name '*.tgz' \) -o \( -type f -a -name '*.tar.gz' \) \) -a -print | sort)

    while read file; do
        extract_tar_archive "${file}" || true
        files_extracted=$((files_extracted + 1))
    done < <(find . -type f -a -name '*.tar' -a -print | sort)

    if [[ ${files_extracted} == 0 ]]; then
        break
    fi
done

while read file; do
    uncompress_file "${file}" "xz" || true
    files_extracted=$((files_extracted + 1))
done < <(find . -type f -name '*.xz' | sort)

while read file; do
    uncompress_file "${file}" "bzip2" || true
    files_extracted=$((files_extracted + 1))
done < <(find . -type f -name '*.bz2' | sort)

while read file; do
    uncompress_file "${file}" "gzip" || true
    files_extracted=$((files_extracted + 1))
done < <(find . -type f -name '*.gz' | sort)

printf "${bold}${green}All files are extracted.${normal}\n"

